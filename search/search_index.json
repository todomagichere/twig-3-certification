{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Summary Info NOTE: The Twig 3 Certification exam only includes questions about the core features and syntax of Twig 3. It does not contain questions about official Twig extensions such as Html, Intl, Inky, String, etc. This summary is extracted from Twig certification official page Basic Concepts Basic Twig concepts Twig syntax Escaping Filters Built-in Twig filters and their parameters Chaining filters Alternative filter syntax Tests Built-in Twig tests Combining tests and conditional expressions Control Structures Loops Conditionals Combining loops and conditionals Variables and Expressions Defining variables Accessing simple and complex variables Expressions Functions Built-in Twig functions and their arguments Operators Built-in Twig operators Combining operators Template Re-use Basic and multi-level inheritance Including template fragment Embedding templates","title":"Summary"},{"location":"#summary","text":"Info NOTE: The Twig 3 Certification exam only includes questions about the core features and syntax of Twig 3. It does not contain questions about official Twig extensions such as Html, Intl, Inky, String, etc. This summary is extracted from Twig certification official page","title":"Summary"},{"location":"#basic-concepts","text":"Basic Twig concepts Twig syntax Escaping","title":"Basic Concepts"},{"location":"#filters","text":"Built-in Twig filters and their parameters Chaining filters Alternative filter syntax","title":"Filters"},{"location":"#tests","text":"Built-in Twig tests Combining tests and conditional expressions","title":"Tests"},{"location":"#control-structures","text":"Loops Conditionals Combining loops and conditionals","title":"Control Structures"},{"location":"#variables-and-expressions","text":"Defining variables Accessing simple and complex variables Expressions","title":"Variables and Expressions"},{"location":"#functions","text":"Built-in Twig functions and their arguments","title":"Functions"},{"location":"#operators","text":"Built-in Twig operators Combining operators","title":"Operators"},{"location":"#template-re-use","text":"Basic and multi-level inheritance Including template fragment Embedding templates","title":"Template Re-use"},{"location":"defining_variables/","text":"Setting a variable Inside code blocks you can also assign values to variables. Assignments use the set tag and can have multiple targets. Here is how you can assign the bar value to the foo variable: {% set foo = 'bar' %} After the set call, the foo variable is available in the template like any other ones: {# displays bar #} {{ foo }} The assigned value can be any valid Twig expression: {% set foo = [1, 2] %} {% set foo = {'foo': 'bar'} %} {% set foo = 'foo' ~ 'bar' %} Several variables can be assigned in one block: {% set foo, bar = 'foo', 'bar' %} {# is equivalent to #} {% set foo = 'foo' %} {% set bar = 'bar' %} The set tag can also be used to 'capture' chunks of text: {% set foo %} <div id=\"pagination\"> ... </div> {% endset %} Caution If you enable automatic output escaping, Twig will only consider the content to be safe when capturing chunks of text. Note that loops are scoped in Twig; therefore a variable declared inside a for loop is not accessible outside the loop itself: {% for item in list %} {% set foo = item %} {% endfor %} {# foo is NOT available #} If you want to access the variable, just declare it before the loop: {% set foo = \"\" %} {% for item in list %} {% set foo = item %} {% endfor %} {# foo is available #}","title":"Defining variables"},{"location":"defining_variables/#setting-a-variable","text":"Inside code blocks you can also assign values to variables. Assignments use the set tag and can have multiple targets. Here is how you can assign the bar value to the foo variable: {% set foo = 'bar' %} After the set call, the foo variable is available in the template like any other ones: {# displays bar #} {{ foo }} The assigned value can be any valid Twig expression: {% set foo = [1, 2] %} {% set foo = {'foo': 'bar'} %} {% set foo = 'foo' ~ 'bar' %} Several variables can be assigned in one block: {% set foo, bar = 'foo', 'bar' %} {# is equivalent to #} {% set foo = 'foo' %} {% set bar = 'bar' %} The set tag can also be used to 'capture' chunks of text: {% set foo %} <div id=\"pagination\"> ... </div> {% endset %} Caution If you enable automatic output escaping, Twig will only consider the content to be safe when capturing chunks of text. Note that loops are scoped in Twig; therefore a variable declared inside a for loop is not accessible outside the loop itself: {% for item in list %} {% set foo = item %} {% endfor %} {# foo is NOT available #} If you want to access the variable, just declare it before the loop: {% set foo = \"\" %} {% for item in list %} {% set foo = item %} {% endfor %} {# foo is available #}","title":"Setting a variable"},{"location":"expressions/","text":"","title":"Expressions"},{"location":"filters/","text":"abs batch capitalize column convert_encoding date date_modify default escape filter first format join json_encode keys last length lower map merge nl2br number_format raw reduce replace reverse round slice sort spaceless split striptags title trim upper url_encode","title":"Built-in Twig filters and their parameters"},{"location":"filters/#abs","text":"","title":"abs"},{"location":"filters/#batch","text":"","title":"batch"},{"location":"filters/#capitalize","text":"","title":"capitalize"},{"location":"filters/#column","text":"","title":"column"},{"location":"filters/#convert_encoding","text":"","title":"convert_encoding"},{"location":"filters/#date","text":"","title":"date"},{"location":"filters/#date_modify","text":"","title":"date_modify"},{"location":"filters/#default","text":"","title":"default"},{"location":"filters/#escape","text":"","title":"escape"},{"location":"filters/#filter","text":"","title":"filter"},{"location":"filters/#first","text":"","title":"first"},{"location":"filters/#format","text":"","title":"format"},{"location":"filters/#join","text":"","title":"join"},{"location":"filters/#json_encode","text":"","title":"json_encode"},{"location":"filters/#keys","text":"","title":"keys"},{"location":"filters/#last","text":"","title":"last"},{"location":"filters/#length","text":"","title":"length"},{"location":"filters/#lower","text":"","title":"lower"},{"location":"filters/#map","text":"","title":"map"},{"location":"filters/#merge","text":"","title":"merge"},{"location":"filters/#nl2br","text":"","title":"nl2br"},{"location":"filters/#number_format","text":"","title":"number_format"},{"location":"filters/#raw","text":"","title":"raw"},{"location":"filters/#reduce","text":"","title":"reduce"},{"location":"filters/#replace","text":"","title":"replace"},{"location":"filters/#reverse","text":"","title":"reverse"},{"location":"filters/#round","text":"","title":"round"},{"location":"filters/#slice","text":"","title":"slice"},{"location":"filters/#sort","text":"","title":"sort"},{"location":"filters/#spaceless","text":"","title":"spaceless"},{"location":"filters/#split","text":"","title":"split"},{"location":"filters/#striptags","text":"","title":"striptags"},{"location":"filters/#title","text":"","title":"title"},{"location":"filters/#trim","text":"","title":"trim"},{"location":"filters/#upper","text":"","title":"upper"},{"location":"filters/#url_encode","text":"","title":"url_encode"},{"location":"functions/","text":"attribute block constant cycle date dump include max min parent random range source template_from_string","title":"Built-in Twig functions and their arguments"},{"location":"functions/#attribute","text":"","title":"attribute"},{"location":"functions/#block","text":"","title":"block"},{"location":"functions/#constant","text":"","title":"constant"},{"location":"functions/#cycle","text":"","title":"cycle"},{"location":"functions/#date","text":"","title":"date"},{"location":"functions/#dump","text":"","title":"dump"},{"location":"functions/#include","text":"","title":"include"},{"location":"functions/#max","text":"","title":"max"},{"location":"functions/#min","text":"","title":"min"},{"location":"functions/#parent","text":"","title":"parent"},{"location":"functions/#random","text":"","title":"random"},{"location":"functions/#range","text":"","title":"range"},{"location":"functions/#source","text":"","title":"source"},{"location":"functions/#template_from_string","text":"","title":"template_from_string"},{"location":"operators/","text":"Operators In The in operator performs containment test. It returns true if the left operand is contained in the right: {{ 1 in [1, 2, 3] }} {{ 'cd' in 'abcde' }} {# both returns true #} Tip You can use this filter to perform a containment test on strings, arrays, or objects implementing the Traversable interface. To perform a negative test, use the not in operator: {% if 1 not in [1, 2, 3] %} {# is equivalent to #} {% if not (1 in [1, 2, 3]) %} Is (Test operator) The is operator performs tests. Tests can be used to test a variable against a common expression. The right operand is name of the test: {# find out if a variable is odd #} {{ name is odd }} Go to the tests page to learn more about the built-in tests. | Applies a filter {% set myVariable = \"foobar\" %} {{ myVariable|upper }} {# displays FOOBAR #} .. Creates a sequence based on the operand before and after the operator (this is syntactic sugar for the range function): {% for i in 1..5 %}{{ i }}{% endfor %} {# is equivalent to #} {% for i in range(1, 5) %}{{ i }}{% endfor %} ~ Converts all operands into strings and concatenates them. {% set name = \"John\" %} {{ \"Hello\" ~ name ~ \"!\" }} {# displays Hello John!. #} . or [] Gets an attribute of a variable. {{ array.name }} {{ array['name'] }} ?: Ternary operator: {{ foo ? 'yes' : 'no' }} {{ foo ?: 'no' }} is the same as {{ foo ? foo : 'no' }} {{ foo ? 'yes' }} is the same as {{ foo ? 'yes' : '' }} ?? Null-coalescing operator: {# returns the value of foo if it is defined and not null, 'no' otherwise #} {{ foo ?? 'no' }} ... The spread operator can be used to expand arrays or hashes (it cannot be used to expand the arguments of a function call): {% set numbers = [1, 2, ...moreNumbers] %} {% set ratings = { 'foo': 10, 'bar': 5, ...moreRatings } %} Math Twig allows you to do math in templates; the following operators are supported: + Adds two numbers together (the operands are casted to numbers). {{ 1 + 1 }} is 2. - Subtracts the second number from the first one. {{ 3 - 2 }} is 1. / Divides two numbers. The returned value will be a floating point number. {{ 1 / 2 }} is {{ 0.5 }}. % Calculates the remainder of an integer division. {{ 11 % 7 }} is 4. // Divides two numbers and returns the floored integer result. {{ 20 // 7 }} is 2, {{ -20 // 7 }} is -3 (this is just syntactic sugar for the round filter). * Multiplies the left operand with the right one. {{ 2 * 2 }} would return 4. ** Raises the left operand to the power of the right operand. {{ 2 ** 3 }} would return 8.","title":"Built-in Twig operators"},{"location":"operators/#operators","text":"","title":"Operators"},{"location":"operators/#in","text":"The in operator performs containment test. It returns true if the left operand is contained in the right: {{ 1 in [1, 2, 3] }} {{ 'cd' in 'abcde' }} {# both returns true #} Tip You can use this filter to perform a containment test on strings, arrays, or objects implementing the Traversable interface. To perform a negative test, use the not in operator: {% if 1 not in [1, 2, 3] %} {# is equivalent to #} {% if not (1 in [1, 2, 3]) %}","title":"In"},{"location":"operators/#is-test-operator","text":"The is operator performs tests. Tests can be used to test a variable against a common expression. The right operand is name of the test: {# find out if a variable is odd #} {{ name is odd }} Go to the tests page to learn more about the built-in tests.","title":"Is (Test operator)"},{"location":"operators/#_1","text":"Applies a filter {% set myVariable = \"foobar\" %} {{ myVariable|upper }} {# displays FOOBAR #}","title":"|"},{"location":"operators/#_2","text":"Creates a sequence based on the operand before and after the operator (this is syntactic sugar for the range function): {% for i in 1..5 %}{{ i }}{% endfor %} {# is equivalent to #} {% for i in range(1, 5) %}{{ i }}{% endfor %}","title":".."},{"location":"operators/#_3","text":"Converts all operands into strings and concatenates them. {% set name = \"John\" %} {{ \"Hello\" ~ name ~ \"!\" }} {# displays Hello John!. #}","title":"~"},{"location":"operators/#or","text":"Gets an attribute of a variable. {{ array.name }} {{ array['name'] }}","title":". or []"},{"location":"operators/#_4","text":"Ternary operator: {{ foo ? 'yes' : 'no' }} {{ foo ?: 'no' }} is the same as {{ foo ? foo : 'no' }} {{ foo ? 'yes' }} is the same as {{ foo ? 'yes' : '' }}","title":"?:"},{"location":"operators/#_5","text":"Null-coalescing operator: {# returns the value of foo if it is defined and not null, 'no' otherwise #} {{ foo ?? 'no' }}","title":"??"},{"location":"operators/#_6","text":"The spread operator can be used to expand arrays or hashes (it cannot be used to expand the arguments of a function call): {% set numbers = [1, 2, ...moreNumbers] %} {% set ratings = { 'foo': 10, 'bar': 5, ...moreRatings } %}","title":"..."},{"location":"operators/#math","text":"Twig allows you to do math in templates; the following operators are supported:","title":"Math"},{"location":"operators/#_7","text":"Adds two numbers together (the operands are casted to numbers). {{ 1 + 1 }} is 2.","title":"+"},{"location":"operators/#-","text":"Subtracts the second number from the first one. {{ 3 - 2 }} is 1.","title":"-"},{"location":"operators/#_8","text":"Divides two numbers. The returned value will be a floating point number. {{ 1 / 2 }} is {{ 0.5 }}.","title":"/"},{"location":"operators/#_9","text":"Calculates the remainder of an integer division. {{ 11 % 7 }} is 4.","title":"%"},{"location":"operators/#_10","text":"Divides two numbers and returns the floored integer result. {{ 20 // 7 }} is 2, {{ -20 // 7 }} is -3 (this is just syntactic sugar for the round filter).","title":"//"},{"location":"operators/#_11","text":"Multiplies the left operand with the right one. {{ 2 * 2 }} would return 4.","title":"*"},{"location":"operators/#_12","text":"Raises the left operand to the power of the right operand. {{ 2 ** 3 }} would return 8.","title":"**"},{"location":"tags/","text":"apply autoescape block deprecated do embed extends flush for","title":"Tags"},{"location":"tags/#apply","text":"","title":"apply"},{"location":"tags/#autoescape","text":"","title":"autoescape"},{"location":"tags/#block","text":"","title":"block"},{"location":"tags/#deprecated","text":"","title":"deprecated"},{"location":"tags/#do","text":"","title":"do"},{"location":"tags/#embed","text":"","title":"embed"},{"location":"tags/#extends","text":"","title":"extends"},{"location":"tags/#flush","text":"","title":"flush"},{"location":"tags/#for","text":"","title":"for"},{"location":"tests/","text":"constant constant checks if a variable has the exact same value as a constant. You can use either global constants or class constants: {% if post.status is constant('Post::PUBLISHED') %} the status attribute is exactly the same as Post::PUBLISHED {% endif %} You can test constants from object instances as well: {% if post.status is constant('PUBLISHED', post) %} the status attribute is exactly the same as Post::PUBLISHED {% endif %} defined defined checks if a variable is defined in the current context. This is very useful if you use the strict_variables option: {# defined works with variable names #} {% if foo is defined %} ... {% endif %} {# and attributes on variables names #} {% if foo.bar is defined %} ... {% endif %} {% if foo['bar'] is defined %} ... {% endif %} When using the defined test on an expression that uses variables in some method calls, be sure that they are all defined first: {% if var is defined and foo.method(var) is defined %} ... {% endif %} divisible by divisible by checks if a variable is divisible by a number: {% if loop.index is divisible by(3) %} ... {% endif %} empty empty checks if a variable is an empty string, an empty array, an empty hash, exactly false, or exactly null. For objects that implement the Countable interface, empty will check the return value of the count() method. For objects that implement the __toString() magic method (and not Countable), it will check if an empty string is returned. {% if foo is empty %} ... {% endif %} even even returns true if the given number is even: {{ var is even }} iterable iterable checks if a variable is an array or a traversable object: {# evaluates to true if the foo variable is iterable #} {% if users is iterable %} {% for user in users %} Hello {{ user }}! {% endfor %} {% else %} {# users is probably a string #} Hello {{ users }}! {% endif %} null null returns true if the variable is null: {{ var is null }} Note none is an alias for null. odd odd returns true if the given number is odd: {{ var is odd }} same as same as checks if a variable is the same as another variable. This is equivalent to === in PHP: {% if foo.attribute is same as(false) %} the foo attribute really is the 'false' PHP value {% endif %}","title":"Built-in Twig tests"},{"location":"tests/#constant","text":"constant checks if a variable has the exact same value as a constant. You can use either global constants or class constants: {% if post.status is constant('Post::PUBLISHED') %} the status attribute is exactly the same as Post::PUBLISHED {% endif %} You can test constants from object instances as well: {% if post.status is constant('PUBLISHED', post) %} the status attribute is exactly the same as Post::PUBLISHED {% endif %}","title":"constant"},{"location":"tests/#defined","text":"defined checks if a variable is defined in the current context. This is very useful if you use the strict_variables option: {# defined works with variable names #} {% if foo is defined %} ... {% endif %} {# and attributes on variables names #} {% if foo.bar is defined %} ... {% endif %} {% if foo['bar'] is defined %} ... {% endif %} When using the defined test on an expression that uses variables in some method calls, be sure that they are all defined first: {% if var is defined and foo.method(var) is defined %} ... {% endif %}","title":"defined"},{"location":"tests/#divisible-by","text":"divisible by checks if a variable is divisible by a number: {% if loop.index is divisible by(3) %} ... {% endif %}","title":"divisible by"},{"location":"tests/#empty","text":"empty checks if a variable is an empty string, an empty array, an empty hash, exactly false, or exactly null. For objects that implement the Countable interface, empty will check the return value of the count() method. For objects that implement the __toString() magic method (and not Countable), it will check if an empty string is returned. {% if foo is empty %} ... {% endif %}","title":"empty"},{"location":"tests/#even","text":"even returns true if the given number is even: {{ var is even }}","title":"even"},{"location":"tests/#iterable","text":"iterable checks if a variable is an array or a traversable object: {# evaluates to true if the foo variable is iterable #} {% if users is iterable %} {% for user in users %} Hello {{ user }}! {% endfor %} {% else %} {# users is probably a string #} Hello {{ users }}! {% endif %}","title":"iterable"},{"location":"tests/#null","text":"null returns true if the variable is null: {{ var is null }} Note none is an alias for null.","title":"null"},{"location":"tests/#odd","text":"odd returns true if the given number is odd: {{ var is odd }}","title":"odd"},{"location":"tests/#same-as","text":"same as checks if a variable is the same as another variable. This is equivalent to === in PHP: {% if foo.attribute is same as(false) %} the foo attribute really is the 'false' PHP value {% endif %}","title":"same as"},{"location":"variables/","text":"Variables Main info The application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it. Use a dot (.) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array): {{ foo.bar }} Note It's important to know that the curly braces are not part of the variable but the print statement. When accessing variables inside tags, don't put the braces around them. If a variable or attribute does not exist, the behavior depends on the strict_variables option value (see environment options): When false , it returns null When true , it throws an exception. Implementation For convenience's sake foo.bar does the following things on the PHP layer: check if foo is an array and bar a valid element; if not, and if foo is an object, check that bar is a valid property; if not, and if foo is an object, check that bar is a valid method (even if bar is the constructor - use __construct() instead); if not, and if foo is an object, check that getBar is a valid method; if not, and if foo is an object, check that isBar is a valid method; if not, and if foo is an object, check that hasBar is a valid method; if not, and if strict_variables is false, return null; if not, throw an exception. Twig also supports a specific syntax for accessing items on PHP arrays, foo['bar']: check if foo is an array and bar a valid element; if not, and if strict_variables is false, return null; if not, throw an exception. Dynamic attribute If you want to access a dynamic attribute of a variable, use the attribute function instead. The attribute function is also useful when the attribute contains special characters (like - that would be interpreted as the minus operator): {# equivalent to the non-working foo.data-foo #} {{ attribute(foo, 'data-foo') }} Global Variables The following variables are always available in templates: _self: references the current template name ; _context: references the current context ; _charset: references the current charset .","title":"Accessing simple and complex variables"},{"location":"variables/#variables","text":"","title":"Variables"},{"location":"variables/#main-info","text":"The application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it. Use a dot (.) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array): {{ foo.bar }} Note It's important to know that the curly braces are not part of the variable but the print statement. When accessing variables inside tags, don't put the braces around them. If a variable or attribute does not exist, the behavior depends on the strict_variables option value (see environment options): When false , it returns null When true , it throws an exception.","title":"Main info"},{"location":"variables/#implementation","text":"For convenience's sake foo.bar does the following things on the PHP layer: check if foo is an array and bar a valid element; if not, and if foo is an object, check that bar is a valid property; if not, and if foo is an object, check that bar is a valid method (even if bar is the constructor - use __construct() instead); if not, and if foo is an object, check that getBar is a valid method; if not, and if foo is an object, check that isBar is a valid method; if not, and if foo is an object, check that hasBar is a valid method; if not, and if strict_variables is false, return null; if not, throw an exception. Twig also supports a specific syntax for accessing items on PHP arrays, foo['bar']: check if foo is an array and bar a valid element; if not, and if strict_variables is false, return null; if not, throw an exception.","title":"Implementation"},{"location":"variables/#dynamic-attribute","text":"If you want to access a dynamic attribute of a variable, use the attribute function instead. The attribute function is also useful when the attribute contains special characters (like - that would be interpreted as the minus operator): {# equivalent to the non-working foo.data-foo #} {{ attribute(foo, 'data-foo') }}","title":"Dynamic attribute"},{"location":"variables/#global-variables","text":"The following variables are always available in templates: _self: references the current template name ; _context: references the current context ; _charset: references the current charset .","title":"Global Variables"},{"location":"test/test1/","text":"Twig 3 Certification Exam Instructions : Choose the correct answer(s) for each question. You have 60 minutes to complete this exam. Some questions may have multiple correct answers. Topic 1: Basic Concepts 1. What is the correct syntax to print a variable in Twig? a) { variable } b) {{ variable }} c) {% variable %} d) {# variable #} 2. How do you escape output to prevent XSS attacks in Twig? a) {{ variable|escape }} b) {{ variable|e }} c) {{ variable|safe }} d) {{ variable|xss }} 3. Which of the following comments is correctly written in Twig? a) {* This is a comment *} b) {% This is a comment %} c) {# This is a comment #} d) <!-- This is a comment --> 4. What is the output of {{ \"Hello <b>World</b>\"|escape }} ? a) Hello <b>World</b> b) Hello &lt;b&gt;World&lt;/b&gt; c) Hello &amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt; d) Hello <b>World</b> 5. What does the following Twig code do? {{ variable|default('default value') }} a) Sets variable to 'default value' b) Prints 'default value' if variable is not defined or empty c) Raises an error if variable is not defined d) Applies a default filter to variable Topic 2: Filters 6. How do you apply a filter to convert a variable to uppercase in Twig? a) {{ variable|uppercase }} b) {{ variable|upper }} c) {{ variable|toUpper }} d) {{ variable|capitalize }} 7. How do you format a date in Twig? a) {{ date|date('Y-m-d') }} b) {{ date|format('Y-m-d') }} c) {{ date|strftime('Y-m-d') }} d) {{ date|datetime('Y-m-d') }} 8. How do you chain multiple filters in Twig? a) {{ variable|filter1|filter2 }} b) {{ variable|(filter1, filter2) }} c) {{ variable|filter1(filter2) }} d) {{ variable|filter1.filter2 }} 9. Which filter would you use to join an array into a string in Twig? a) {{ array|join(', ') }} b) {{ array|concat(', ') }} c) {{ array|implode(', ') }} d) {{ array|merge(', ') }} 10. What is the alternative syntax for applying the upper filter to a variable in Twig? a) {{ upper(variable) }} b) {{ variable|uppercase }} c) {% filter upper %}{{ variable }}{% endfilter %} d) {% apply upper %}{{ variable }}{% endapply %} Topic 3: Tests 11. How do you check if a variable is defined in Twig? a) {% if variable is defined %} b) {% if variable is not empty %} c) {% if variable exists %} d) {% if variable is set %} 12. Which of the following tests if a variable is empty in Twig? a) {% if variable is null %} b) {% if variable is empty %} c) {% if variable is none %} d) {% if variable is blank %} 13. How do you combine tests to check if a variable is defined and not empty in Twig? a) {% if variable is defined and variable is not empty %} b) {% if variable exists and variable is not empty %} c) {% if variable is defined and not empty %} d) {% if variable exists and not empty %} 14. How do you test if a string contains a specific substring in Twig? a) {% if \"substring\" in string %} b) {% if string contains \"substring\" %} c) {% if string has \"substring\" %} d) {% if string includes \"substring\" %} 15. Which of the following tests if an array is iterable in Twig? a) {% if array is iterable %} b) {% if array is array %} c) {% if array is traversable %} d) {% if array is list %} Topic 4: Control Structures 16. What is the correct structure for a for loop in Twig? a) {% foreach item in items %} b) {% while item in items %} c) {% loop item in items %} d) {% for item in items %} 17. Which of the following statements correctly create an if condition in Twig? a) {% if condition %} ... {% endif %} b) {% if condition then %} ... {% end %} c) {% if (condition) %} ... {% endif %} d) {% if (condition) then %} ... {% endif %} 18. How do you write an else if condition in Twig? a) {% else if condition %} b) {% elseif condition %} c) {% elif condition %} d) {% ifelse condition %} 19. What is the correct way to use a for loop with an index in Twig? a) {% for item in items with index %} b) {% for item, index in items %} c) {% for index, item in items %} d) {% for item in items, index %} 20. How do you combine a for loop and an if condition in Twig? a) {% for item in items if condition %} b) {% for item in items %} {% if condition %} c) {% if condition %} {% for item in items %} d) {% for item in items %} {% if condition %} ... {% endif %} {% endfor %} Topic 5: Variables and Expressions 21. How do you define a variable in Twig? a) {% set variable = value %} b) {% define variable = value %} c) {% var variable = value %} d) {% let variable = value %} 22. How do you access an element of an array in Twig? a) {{ array.element }} b) {{ array[element] }} c) {{ array->element }} d) {{ array:element }} 23. How do you access a property of an object in Twig? a) {{ object.property }} b) {{ object[property] }} c) {{ object->property }} d) {{ object:property }} 24. Which of the following is the correct syntax to increment a variable in Twig? a) {% set variable = variable + 1 %} b) {% increment variable %} c) {% variable++ %} d) {% var variable = variable + 1 %} 25. How do you use a ternary operator in Twig? a) {{ condition ? 'true value' : 'false value' }} b) {{ condition ? 'true value' else 'false value' }} c) {% if condition ? 'true value' : 'false value' %} d) {% condition ? 'true value' : 'false value' %} Topic 6: Functions 26. Which function is used to cycle through values in Twig? a) {{ cycle(['odd', 'even'], loop.index) }} b) {{ loop(['odd', 'even'], index) }} c) {{ iterate(['odd', 'even'], loop.index) }} d) {{ rotate(['odd', 'even'], loop.index) }} 27. How do you include another template in Twig? a) {% include 'template.html.twig' %} b) {% import 'template.html.twig' %} c) {% embed 'template.html.twig' %} d) {% extend 'template.html.twig' %} 28. Which function is used to dump information about a variable for debugging purposes in Twig? a) {{ dump(variable) }} b) {{ var_dump(variable) }} c) {{ debug(variable) }} d) {{ print_r(variable) }} 29. How do you create a range of numbers in Twig? a) `{{ range(1, 10) }} b) {{ 1..10 }} c) {{ 1 to 10 }} d) {{ sequence(1, 10) }}` 30. Which function is used to get the length of an array or string in Twig? a) {{ length(variable) }} b) {{ count(variable) }} c) {{ size(variable) }} d) {{ variable.length }} Topic 7: Operators 31. What is the correct way to compare if two variables are equal in Twig? a) {% if variable1 == variable2 %} b) {% if variable1 === variable2 %} c) {% if variable1 eq variable2 %} d) {% if variable1 equal variable2 %} 32. Which of the following are logical operators in Twig? a) and b) && c) or d) || 33. How do you perform a modulo operation in Twig? a) {% set result = variable % 2 %} b) {% set result = variable mod 2 %} c) {% set result = variable % 2 %} d) {% set result = variable % 2 %} 34. Which of the following operators can be used to concatenate strings in Twig? a) ~ b) + c) & d) . 35. How do you negate a condition in Twig? a) {% if not condition %} b) {% if !condition %} c) {% if ~condition %} d) {% if -condition %} Topic 8: Template Re-use 36. What is the correct way to extend a template in Twig? a) {% extend 'base.html.twig' %} b) {% include 'base.html.twig' %} c) {% inherit 'base.html.twig' %} d) {% extends 'base.html.twig' %} 37. How do you define a block in a Twig template? a) {% block blockname %}...{% endblock %} b) {% section blockname %}...{% endsection %} c) {% define blockname %}...{% enddefine %} d) {% part blockname %}...{% endpart %} 38. Which of the following is the correct syntax to embed a template within another template in Twig? a) {% include 'template.html.twig' %} b) {% import 'template.html.twig' %} c) {% embed 'template.html.twig' %} d) {% extend 'template.html.twig' %} 39. How do you include a template fragment in Twig? a) {% include 'fragment.html.twig' %} b) {% import 'fragment.html.twig' %} c) {% embed 'fragment.html.twig' %} d) {% extend 'fragment.html.twig' %} 40. How do you use multi-level inheritance in Twig? a) {% extends 'grandparent.html.twig' %} in parent and {% extends 'parent.html.twig' %} in child b) {% include 'grandparent.html.twig' %} in parent and {% include 'parent.html.twig' %} in child c) {% inherit 'grandparent.html.twig' %} in parent and {% inherit 'parent.html.twig' %} in child d) {% embed 'grandparent.html.twig' %} in parent and {% embed 'parent.html.twig' %} in child 41. Which of the following can be used to include a template fragment with a context? a) {% include 'fragment.html.twig' with { 'var': value } %} b) {% import 'fragment.html.twig' with { 'var': value } %} c) {% embed 'fragment.html.twig' with { 'var': value } %} d) {% extend 'fragment.html.twig' with { 'var': value } %} 42. What is the purpose of the {% parent %} tag in Twig? a) To refer to the parent block in a child template b) To extend the parent template c) To include the parent template d) To import the parent template 43. How do you use super() to refer to the parent block content in Twig? a) {{ super() }} b) {% super() %} c) {{ parent() }} d) {% parent() %} 44. How do you prevent a block from being overridden in child templates in Twig? a) {% block blockname final %}...{% endblock %} b) {% block blockname readonly %}...{% endblock %} c) {% block blockname %}...{% endblock %} with {% parent() %} in the block d) {% block blockname %}...{% endblock %} with {% final %} inside the block 45. Which of the following statements correctly define a block in a parent template and override it in a child template? a) {% block blockname %}...{% endblock %} in parent and {% block blockname %}...{% endblock %} in child b) {% block blockname %}...{% endblock %} in parent and {% override blockname %}...{% endoverride %} in child c) {% section blockname %}...{% endsection %} in parent and {% section blockname %}...{% endsection %} in child d) {% define blockname %}...{% enddefine %} in parent and {% define blockname %}...{% enddefine %} in child Key Answers Answers for the Twig 3 Certification Exam 1. b) {{ variable }} 2. a) {{ variable|escape }} and b) {{ variable|e }} 3. c) {# This is a comment #} 4. b) Hello &lt;b&gt;World&lt;/b&gt; 5. b) Prints 'default value' if variable is not defined or empty 6. b) {{ variable|upper }} 7. a) {{ date|date('Y-m-d') }} 8. a) {{ variable|filter1|filter2 }} 9. a) {{ array|join(', ') }} 10. c) {% filter upper %}{{ variable }}{% endfilter %} 11. a) {% if variable is defined %} 12. b) {% if variable is empty %} 13. a) {% if variable is defined and variable is not empty %} 14. a) {% if \"substring\" in string %} 15. a) {% if array is iterable %} 16. d) {% for item in items %} 17. a) {% if condition %} ... {% endif %} 18. b) {% elseif condition %} 19. c) {% for index, item in items %} 20. d) {% for item in items %} {% if condition %} ... {% endif %} {% endfor %} 21. a) {% set variable = value %} 22. b) {{ array[element] }} 23. a) {{ object.property }} 24. a) {% set variable = variable + 1 %} 25. a) {{ condition ? 'true value' : 'false value' }} 26. a) {{ cycle(['odd', 'even'], loop.index) }} 27. a) {% include 'template.html.twig' %} 28. a) {{ dump(variable) }} 29. a) {{ range(1, 10) }} 30. a) {{ length(variable) }} 31. a) {% if variable1 == variable2 %} 32. a) and and c) or 33. b) {% set result = variable mod 2 %} 34. a) ~ 35. a) {% if not condition %} 36. d) {% extends 'base.html.twig' %} 37. a) {% block blockname %}...{% endblock %} 38. c) {% embed 'template.html.twig' %} 39. a) {% include 'fragment.html.twig' %} 40. a) {% extends 'grandparent.html.twig' %} in parent and {% extends 'parent.html.twig' %} in child 41. a) {% include 'fragment.html.twig' with { 'var': value } %} 42. a) To refer to the parent block in a child template 43. a) {{ super() }} 44. a) {% block blockname final %}...{% endblock %} 45. a) {% block blockname %}...{% endblock %} in parent and {% block blockname %}...{% endblock %} in child","title":"Test 1"},{"location":"test/test1/#twig-3-certification-exam","text":"Instructions : Choose the correct answer(s) for each question. You have 60 minutes to complete this exam. Some questions may have multiple correct answers.","title":"Twig 3 Certification Exam"},{"location":"test/test1/#topic-1-basic-concepts","text":"1. What is the correct syntax to print a variable in Twig? a) { variable } b) {{ variable }} c) {% variable %} d) {# variable #} 2. How do you escape output to prevent XSS attacks in Twig? a) {{ variable|escape }} b) {{ variable|e }} c) {{ variable|safe }} d) {{ variable|xss }} 3. Which of the following comments is correctly written in Twig? a) {* This is a comment *} b) {% This is a comment %} c) {# This is a comment #} d) <!-- This is a comment --> 4. What is the output of {{ \"Hello <b>World</b>\"|escape }} ? a) Hello <b>World</b> b) Hello &lt;b&gt;World&lt;/b&gt; c) Hello &amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt; d) Hello <b>World</b> 5. What does the following Twig code do? {{ variable|default('default value') }} a) Sets variable to 'default value' b) Prints 'default value' if variable is not defined or empty c) Raises an error if variable is not defined d) Applies a default filter to variable","title":"Topic 1: Basic Concepts"},{"location":"test/test1/#topic-2-filters","text":"6. How do you apply a filter to convert a variable to uppercase in Twig? a) {{ variable|uppercase }} b) {{ variable|upper }} c) {{ variable|toUpper }} d) {{ variable|capitalize }} 7. How do you format a date in Twig? a) {{ date|date('Y-m-d') }} b) {{ date|format('Y-m-d') }} c) {{ date|strftime('Y-m-d') }} d) {{ date|datetime('Y-m-d') }} 8. How do you chain multiple filters in Twig? a) {{ variable|filter1|filter2 }} b) {{ variable|(filter1, filter2) }} c) {{ variable|filter1(filter2) }} d) {{ variable|filter1.filter2 }} 9. Which filter would you use to join an array into a string in Twig? a) {{ array|join(', ') }} b) {{ array|concat(', ') }} c) {{ array|implode(', ') }} d) {{ array|merge(', ') }} 10. What is the alternative syntax for applying the upper filter to a variable in Twig? a) {{ upper(variable) }} b) {{ variable|uppercase }} c) {% filter upper %}{{ variable }}{% endfilter %} d) {% apply upper %}{{ variable }}{% endapply %}","title":"Topic 2: Filters"},{"location":"test/test1/#topic-3-tests","text":"11. How do you check if a variable is defined in Twig? a) {% if variable is defined %} b) {% if variable is not empty %} c) {% if variable exists %} d) {% if variable is set %} 12. Which of the following tests if a variable is empty in Twig? a) {% if variable is null %} b) {% if variable is empty %} c) {% if variable is none %} d) {% if variable is blank %} 13. How do you combine tests to check if a variable is defined and not empty in Twig? a) {% if variable is defined and variable is not empty %} b) {% if variable exists and variable is not empty %} c) {% if variable is defined and not empty %} d) {% if variable exists and not empty %} 14. How do you test if a string contains a specific substring in Twig? a) {% if \"substring\" in string %} b) {% if string contains \"substring\" %} c) {% if string has \"substring\" %} d) {% if string includes \"substring\" %} 15. Which of the following tests if an array is iterable in Twig? a) {% if array is iterable %} b) {% if array is array %} c) {% if array is traversable %} d) {% if array is list %}","title":"Topic 3: Tests"},{"location":"test/test1/#topic-4-control-structures","text":"16. What is the correct structure for a for loop in Twig? a) {% foreach item in items %} b) {% while item in items %} c) {% loop item in items %} d) {% for item in items %} 17. Which of the following statements correctly create an if condition in Twig? a) {% if condition %} ... {% endif %} b) {% if condition then %} ... {% end %} c) {% if (condition) %} ... {% endif %} d) {% if (condition) then %} ... {% endif %} 18. How do you write an else if condition in Twig? a) {% else if condition %} b) {% elseif condition %} c) {% elif condition %} d) {% ifelse condition %} 19. What is the correct way to use a for loop with an index in Twig? a) {% for item in items with index %} b) {% for item, index in items %} c) {% for index, item in items %} d) {% for item in items, index %} 20. How do you combine a for loop and an if condition in Twig? a) {% for item in items if condition %} b) {% for item in items %} {% if condition %} c) {% if condition %} {% for item in items %} d) {% for item in items %} {% if condition %} ... {% endif %} {% endfor %}","title":"Topic 4: Control Structures"},{"location":"test/test1/#topic-5-variables-and-expressions","text":"21. How do you define a variable in Twig? a) {% set variable = value %} b) {% define variable = value %} c) {% var variable = value %} d) {% let variable = value %} 22. How do you access an element of an array in Twig? a) {{ array.element }} b) {{ array[element] }} c) {{ array->element }} d) {{ array:element }} 23. How do you access a property of an object in Twig? a) {{ object.property }} b) {{ object[property] }} c) {{ object->property }} d) {{ object:property }} 24. Which of the following is the correct syntax to increment a variable in Twig? a) {% set variable = variable + 1 %} b) {% increment variable %} c) {% variable++ %} d) {% var variable = variable + 1 %} 25. How do you use a ternary operator in Twig? a) {{ condition ? 'true value' : 'false value' }} b) {{ condition ? 'true value' else 'false value' }} c) {% if condition ? 'true value' : 'false value' %} d) {% condition ? 'true value' : 'false value' %}","title":"Topic 5: Variables and Expressions"},{"location":"test/test1/#topic-6-functions","text":"26. Which function is used to cycle through values in Twig? a) {{ cycle(['odd', 'even'], loop.index) }} b) {{ loop(['odd', 'even'], index) }} c) {{ iterate(['odd', 'even'], loop.index) }} d) {{ rotate(['odd', 'even'], loop.index) }} 27. How do you include another template in Twig? a) {% include 'template.html.twig' %} b) {% import 'template.html.twig' %} c) {% embed 'template.html.twig' %} d) {% extend 'template.html.twig' %} 28. Which function is used to dump information about a variable for debugging purposes in Twig? a) {{ dump(variable) }} b) {{ var_dump(variable) }} c) {{ debug(variable) }} d) {{ print_r(variable) }} 29. How do you create a range of numbers in Twig? a) `{{ range(1, 10) }} b) {{ 1..10 }} c) {{ 1 to 10 }} d) {{ sequence(1, 10) }}` 30. Which function is used to get the length of an array or string in Twig? a) {{ length(variable) }} b) {{ count(variable) }} c) {{ size(variable) }} d) {{ variable.length }}","title":"Topic 6: Functions"},{"location":"test/test1/#topic-7-operators","text":"31. What is the correct way to compare if two variables are equal in Twig? a) {% if variable1 == variable2 %} b) {% if variable1 === variable2 %} c) {% if variable1 eq variable2 %} d) {% if variable1 equal variable2 %} 32. Which of the following are logical operators in Twig? a) and b) && c) or d) || 33. How do you perform a modulo operation in Twig? a) {% set result = variable % 2 %} b) {% set result = variable mod 2 %} c) {% set result = variable % 2 %} d) {% set result = variable % 2 %} 34. Which of the following operators can be used to concatenate strings in Twig? a) ~ b) + c) & d) . 35. How do you negate a condition in Twig? a) {% if not condition %} b) {% if !condition %} c) {% if ~condition %} d) {% if -condition %}","title":"Topic 7: Operators"},{"location":"test/test1/#topic-8-template-re-use","text":"36. What is the correct way to extend a template in Twig? a) {% extend 'base.html.twig' %} b) {% include 'base.html.twig' %} c) {% inherit 'base.html.twig' %} d) {% extends 'base.html.twig' %} 37. How do you define a block in a Twig template? a) {% block blockname %}...{% endblock %} b) {% section blockname %}...{% endsection %} c) {% define blockname %}...{% enddefine %} d) {% part blockname %}...{% endpart %} 38. Which of the following is the correct syntax to embed a template within another template in Twig? a) {% include 'template.html.twig' %} b) {% import 'template.html.twig' %} c) {% embed 'template.html.twig' %} d) {% extend 'template.html.twig' %} 39. How do you include a template fragment in Twig? a) {% include 'fragment.html.twig' %} b) {% import 'fragment.html.twig' %} c) {% embed 'fragment.html.twig' %} d) {% extend 'fragment.html.twig' %} 40. How do you use multi-level inheritance in Twig? a) {% extends 'grandparent.html.twig' %} in parent and {% extends 'parent.html.twig' %} in child b) {% include 'grandparent.html.twig' %} in parent and {% include 'parent.html.twig' %} in child c) {% inherit 'grandparent.html.twig' %} in parent and {% inherit 'parent.html.twig' %} in child d) {% embed 'grandparent.html.twig' %} in parent and {% embed 'parent.html.twig' %} in child 41. Which of the following can be used to include a template fragment with a context? a) {% include 'fragment.html.twig' with { 'var': value } %} b) {% import 'fragment.html.twig' with { 'var': value } %} c) {% embed 'fragment.html.twig' with { 'var': value } %} d) {% extend 'fragment.html.twig' with { 'var': value } %} 42. What is the purpose of the {% parent %} tag in Twig? a) To refer to the parent block in a child template b) To extend the parent template c) To include the parent template d) To import the parent template 43. How do you use super() to refer to the parent block content in Twig? a) {{ super() }} b) {% super() %} c) {{ parent() }} d) {% parent() %} 44. How do you prevent a block from being overridden in child templates in Twig? a) {% block blockname final %}...{% endblock %} b) {% block blockname readonly %}...{% endblock %} c) {% block blockname %}...{% endblock %} with {% parent() %} in the block d) {% block blockname %}...{% endblock %} with {% final %} inside the block 45. Which of the following statements correctly define a block in a parent template and override it in a child template? a) {% block blockname %}...{% endblock %} in parent and {% block blockname %}...{% endblock %} in child b) {% block blockname %}...{% endblock %} in parent and {% override blockname %}...{% endoverride %} in child c) {% section blockname %}...{% endsection %} in parent and {% section blockname %}...{% endsection %} in child d) {% define blockname %}...{% enddefine %} in parent and {% define blockname %}...{% enddefine %} in child","title":"Topic 8: Template Re-use"},{"location":"test/test1/#key-answers","text":"","title":"Key Answers"},{"location":"test/test1/#answers-for-the-twig-3-certification-exam","text":"1. b) {{ variable }} 2. a) {{ variable|escape }} and b) {{ variable|e }} 3. c) {# This is a comment #} 4. b) Hello &lt;b&gt;World&lt;/b&gt; 5. b) Prints 'default value' if variable is not defined or empty 6. b) {{ variable|upper }} 7. a) {{ date|date('Y-m-d') }} 8. a) {{ variable|filter1|filter2 }} 9. a) {{ array|join(', ') }} 10. c) {% filter upper %}{{ variable }}{% endfilter %} 11. a) {% if variable is defined %} 12. b) {% if variable is empty %} 13. a) {% if variable is defined and variable is not empty %} 14. a) {% if \"substring\" in string %} 15. a) {% if array is iterable %} 16. d) {% for item in items %} 17. a) {% if condition %} ... {% endif %} 18. b) {% elseif condition %} 19. c) {% for index, item in items %} 20. d) {% for item in items %} {% if condition %} ... {% endif %} {% endfor %} 21. a) {% set variable = value %} 22. b) {{ array[element] }} 23. a) {{ object.property }} 24. a) {% set variable = variable + 1 %} 25. a) {{ condition ? 'true value' : 'false value' }} 26. a) {{ cycle(['odd', 'even'], loop.index) }} 27. a) {% include 'template.html.twig' %} 28. a) {{ dump(variable) }} 29. a) {{ range(1, 10) }} 30. a) {{ length(variable) }} 31. a) {% if variable1 == variable2 %} 32. a) and and c) or 33. b) {% set result = variable mod 2 %} 34. a) ~ 35. a) {% if not condition %} 36. d) {% extends 'base.html.twig' %} 37. a) {% block blockname %}...{% endblock %} 38. c) {% embed 'template.html.twig' %} 39. a) {% include 'fragment.html.twig' %} 40. a) {% extends 'grandparent.html.twig' %} in parent and {% extends 'parent.html.twig' %} in child 41. a) {% include 'fragment.html.twig' with { 'var': value } %} 42. a) To refer to the parent block in a child template 43. a) {{ super() }} 44. a) {% block blockname final %}...{% endblock %} 45. a) {% block blockname %}...{% endblock %} in parent and {% block blockname %}...{% endblock %} in child","title":"Answers for the Twig 3 Certification Exam"}]}