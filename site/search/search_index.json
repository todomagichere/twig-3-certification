{"config":{"indexing":"full","lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Summary Info NOTE: The Twig 3 Certification exam only includes questions about the core features and syntax of Twig 3. It does not contain questions about official Twig extensions such as Html, Intl, Inky, String, etc. This summary is extracted from Twig certification official page Basic Concepts Basic Twig concepts Twig syntax Escaping Filters Built-in Twig filters and their parameters Chaining filters Alternative filter syntax Tests Built-in Twig tests Combining tests and conditional expressions Control Structures Loops Conditionals Combining loops and conditionals Variables and Expressions Defining variables Accessing simple and complex variables Expressions Functions Built-in Twig functions and their arguments Operators Built-in Twig operators Combining operators Template Re-use Basic and multi-level inheritance Including template fragment Embedding templates","title":"Embedding templates"},{"location":"#summary","text":"Info NOTE: The Twig 3 Certification exam only includes questions about the core features and syntax of Twig 3. It does not contain questions about official Twig extensions such as Html, Intl, Inky, String, etc. This summary is extracted from Twig certification official page","title":"Summary"},{"location":"#basic-concepts","text":"Basic Twig concepts Twig syntax Escaping","title":"Basic Concepts"},{"location":"#filters","text":"Built-in Twig filters and their parameters Chaining filters Alternative filter syntax","title":"Filters"},{"location":"#tests","text":"Built-in Twig tests Combining tests and conditional expressions","title":"Tests"},{"location":"#control-structures","text":"Loops Conditionals Combining loops and conditionals","title":"Control Structures"},{"location":"#variables-and-expressions","text":"Defining variables Accessing simple and complex variables Expressions","title":"Variables and Expressions"},{"location":"#functions","text":"Built-in Twig functions and their arguments","title":"Functions"},{"location":"#operators","text":"Built-in Twig operators Combining operators","title":"Operators"},{"location":"#template-re-use","text":"Basic and multi-level inheritance Including template fragment Embedding templates","title":"Template Re-use"},{"location":"defining_variables/","text":"Setting a variable Inside code blocks you can also assign values to variables. Assignments use the set tag and can have multiple targets. Here is how you can assign the bar value to the foo variable: {% set foo = 'bar' %} After the set call, the foo variable is available in the template like any other ones: {# displays bar #} {{ foo }} The assigned value can be any valid Twig expression: {% set foo = [1, 2] %} {% set foo = {'foo': 'bar'} %} {% set foo = 'foo' ~ 'bar' %} Several variables can be assigned in one block: {% set foo, bar = 'foo', 'bar' %} {# is equivalent to #} {% set foo = 'foo' %} {% set bar = 'bar' %} The set tag can also be used to 'capture' chunks of text: {% set foo %} <div id=\"pagination\"> ... </div> {% endset %} Caution If you enable automatic output escaping, Twig will only consider the content to be safe when capturing chunks of text. Note that loops are scoped in Twig; therefore a variable declared inside a for loop is not accessible outside the loop itself: {% for item in list %} {% set foo = item %} {% endfor %} {# foo is NOT available #} If you want to access the variable, just declare it before the loop: {% set foo = \"\" %} {% for item in list %} {% set foo = item %} {% endfor %} {# foo is available #}","title":"Defining variables"},{"location":"defining_variables/#setting-a-variable","text":"Inside code blocks you can also assign values to variables. Assignments use the set tag and can have multiple targets. Here is how you can assign the bar value to the foo variable: {% set foo = 'bar' %} After the set call, the foo variable is available in the template like any other ones: {# displays bar #} {{ foo }} The assigned value can be any valid Twig expression: {% set foo = [1, 2] %} {% set foo = {'foo': 'bar'} %} {% set foo = 'foo' ~ 'bar' %} Several variables can be assigned in one block: {% set foo, bar = 'foo', 'bar' %} {# is equivalent to #} {% set foo = 'foo' %} {% set bar = 'bar' %} The set tag can also be used to 'capture' chunks of text: {% set foo %} <div id=\"pagination\"> ... </div> {% endset %} Caution If you enable automatic output escaping, Twig will only consider the content to be safe when capturing chunks of text. Note that loops are scoped in Twig; therefore a variable declared inside a for loop is not accessible outside the loop itself: {% for item in list %} {% set foo = item %} {% endfor %} {# foo is NOT available #} If you want to access the variable, just declare it before the loop: {% set foo = \"\" %} {% for item in list %} {% set foo = item %} {% endfor %} {# foo is available #}","title":"Setting a variable"},{"location":"expressions/","text":"","title":"Expressions"},{"location":"variables/","text":"Variables Main info The application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it. Use a dot (.) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array): {{ foo.bar }} Note It's important to know that the curly braces are not part of the variable but the print statement. When accessing variables inside tags, don't put the braces around them. If a variable or attribute does not exist, the behavior depends on the strict_variables option value (see environment options): When false , it returns null When true , it throws an exception. Implementation For convenience's sake foo.bar does the following things on the PHP layer: check if foo is an array and bar a valid element; if not, and if foo is an object, check that bar is a valid property; if not, and if foo is an object, check that bar is a valid method (even if bar is the constructor - use __construct() instead); if not, and if foo is an object, check that getBar is a valid method; if not, and if foo is an object, check that isBar is a valid method; if not, and if foo is an object, check that hasBar is a valid method; if not, and if strict_variables is false, return null; if not, throw an exception. Twig also supports a specific syntax for accessing items on PHP arrays, foo['bar']: check if foo is an array and bar a valid element; if not, and if strict_variables is false, return null; if not, throw an exception. Dynamic attribute If you want to access a dynamic attribute of a variable, use the attribute function instead. The attribute function is also useful when the attribute contains special characters (like - that would be interpreted as the minus operator): {# equivalent to the non-working foo.data-foo #} {{ attribute(foo, 'data-foo') }} Global Variables The following variables are always available in templates: _self: references the current template name ; _context: references the current context ; _charset: references the current charset .","title":"Accessing simple and complex variables"},{"location":"variables/#variables","text":"","title":"Variables"},{"location":"variables/#main-info","text":"The application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it. Use a dot (.) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array): {{ foo.bar }} Note It's important to know that the curly braces are not part of the variable but the print statement. When accessing variables inside tags, don't put the braces around them. If a variable or attribute does not exist, the behavior depends on the strict_variables option value (see environment options): When false , it returns null When true , it throws an exception.","title":"Main info"},{"location":"variables/#implementation","text":"For convenience's sake foo.bar does the following things on the PHP layer: check if foo is an array and bar a valid element; if not, and if foo is an object, check that bar is a valid property; if not, and if foo is an object, check that bar is a valid method (even if bar is the constructor - use __construct() instead); if not, and if foo is an object, check that getBar is a valid method; if not, and if foo is an object, check that isBar is a valid method; if not, and if foo is an object, check that hasBar is a valid method; if not, and if strict_variables is false, return null; if not, throw an exception. Twig also supports a specific syntax for accessing items on PHP arrays, foo['bar']: check if foo is an array and bar a valid element; if not, and if strict_variables is false, return null; if not, throw an exception.","title":"Implementation"},{"location":"variables/#dynamic-attribute","text":"If you want to access a dynamic attribute of a variable, use the attribute function instead. The attribute function is also useful when the attribute contains special characters (like - that would be interpreted as the minus operator): {# equivalent to the non-working foo.data-foo #} {{ attribute(foo, 'data-foo') }}","title":"Dynamic attribute"},{"location":"variables/#global-variables","text":"The following variables are always available in templates: _self: references the current template name ; _context: references the current context ; _charset: references the current charset .","title":"Global Variables"}]}